/*Copyright (c) 2009 De Pannekoek en De Kale B.V.,  www.dpdk.nlPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. */package nl.dpdk.air {	import nl.dpdk.collections.lists.ArrayList;	import nl.dpdk.collections.sets.ResultRow;	import nl.dpdk.collections.sets.ResultSet;	/**	 * This Factory creates a ResultSet object from the data that comes back via the result of an SQL SELECT query.	 * This makes it easier to use by having a more powerful data structure than the SQLResult	 * 	 * @see nl.dpdk.collections.sets.ResultRow	 * @see nl.dpdk.collections.sets.ResultSet	 * @see flash.data.SQLResult	 * 	 * @author Rolf Vreijdenberger	 */	public class SQLResultToResultSetFactory {				/**		 * creates a ResultSet from an SQLResult, to allow more powerful manipulation by using a better datastructure		 * @param from the SQLResult		 * @return a new ResultSet, either containing the data, or an empty ResultSet		 */		public static function create(from : SQLResult) : ResultSet {			//is there any data in it			var totalRows: int = from.data.length;			if(totalRows == 0) {				return new ResultSet(new ArrayList());				}						var columns : ArrayList = new ArrayList();			var row : ResultRow;			/**			 * now, first get the column names from the SQLResult, take the first item from the data array, which is an associative array (object).			 * SQLResult is nothing more than a holder for an associative multidimensional array			 */ 			for (var c : String in from.data[0]) {				//key/value pair of associative array				//trace("c: " + c + ", result: " + from.data[0][c]);				columns.add(c);			}			//create the resultset with the right column names			var result : ResultSet = new ResultSet(columns);						/**			 * now loop through all data rows and store it in a ResultRow			 */			var j : int;			var totalFields: int = result.getColumns().size();			var columnName: String;			for (var i : int = 0;i < totalRows; ++i) {				row = new ResultRow();				for ( j = 0;j < totalFields; ++j) {					//dynamic setting of properties on ResultRow					columnName = columns.get(j);					row[columnName] = from.data[i][columnName];				}				result.add(row);			}				return result;		}	}}